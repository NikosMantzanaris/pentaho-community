/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.32
 * Generated at: 2012-11-01 17:49:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import org.pentaho.platform.api.data.IDatasourceService;
import org.pentaho.platform.engine.core.system.PentahoSystem;
import org.pentaho.platform.api.engine.IPentahoSession;
import org.pentaho.platform.web.jsp.messages.Messages;
import org.pentaho.platform.web.http.WebTemplateHelper;
import org.pentaho.platform.api.engine.IUITemplater;
import org.pentaho.platform.util.messages.LocaleHelper;
import org.pentaho.platform.web.http.PentahoHttpSessionHelper;

public final class UpdateSampleEmails_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


  private static final String SampleDataJndiName = "SampleDataAdmin";
  // Try the datasource first. If unsuccessful, then go with the driver stuff
  private static final String SampleDataJDBCUrl = "jdbc:hsqldb:hsql://localhost/sampledata";
  private static final String SampleDataJDBCDriver = "org.hsqldb.jdbcDriver";
  private static final String SampleDataUserId = "pentaho_admin";
  private static final String SampleDataPassword = "password";
  private static final String SampleDataQuery = "SELECT REGION, MANAGER_NAME, EMAIL FROM DEPARTMENT_MANAGERS";
  private static final String SampleDataInsert = "INSERT INTO DEPARTMENT_MANAGERS (REGION, MANAGER_NAME, EMAIL) VALUES (?, ?, ?)";
  private static final String SampleDelete = "DELETE FROM DEPARTMENT_MANAGERS";
  private static final String SampleDataCount = "SELECT COUNT(*) FROM DEPARTMENT_MANAGERS";
  private static final int REGION_COLUMN = 0;
  private static final int MGR_COLUMN = 1;
  private static final int EMAIL_COLUMN = 2;
  private static final int COLUMN_COUNT = 3;
  private static DataSource sampleDataDS;
  private static boolean initialized = false;
  
  private static void initJdbc() {
      if (initialized) { 
        return; 
      }
      try {
        IDatasourceService datasourceService = PentahoSystem.getObjectFactory().get(IDatasourceService.class, null);
        sampleDataDS = datasourceService.getDataSource(SampleDataJndiName);
        if (sampleDataDS != null) {
          initialized = true;
          return;
        }
      } catch (Exception ex) {
        ex.printStackTrace();
      }

      try {
        System.out.println("Couldn't load datasource - falling back to driver manager");
        initialized = true;
        Class.forName(SampleDataJDBCDriver);
      } catch (Exception ex) {
        System.out.println("Exception finding JDBC Driver " + SampleDataJDBCDriver);
      }
    
  }


  /*
   * Returns a 2-d array
   *   [0..rowcount-1][REGION_COLUMN] = Region
   *   [0..rowcount-1][MGR_COLUMN] = Mgr Name
   *   [0..rowcount-1][EMAIL_COLUMN] = Email Address
   * 
   * throws SQLException
   */
  private String[][] getExistingEmailUsers() throws SQLException {
    String[][] rtn = null;
    Connection conn = getConnection();
    try {
      Statement stmt = conn.createStatement();
      try {
        // Get count...
        int rowCount = 0;
        ResultSet rs = stmt.executeQuery(SampleDataCount);
        try {
          rs.next();
          rowCount = rs.getInt(1);
        } finally {
          rs.close();
        }
        if (rowCount == 0) {
          return rtn;
        }
        rtn = new String[rowCount][COLUMN_COUNT];
        
        rs = stmt.executeQuery(SampleDataQuery);
        try {
          int rowNum = 0;
          while (rs.next()) {
            rtn[rowNum][REGION_COLUMN] = rs.getString(REGION_COLUMN+1);
            rtn[rowNum][MGR_COLUMN] = rs.getString(MGR_COLUMN+1);
            rtn[rowNum][EMAIL_COLUMN] = rs.getString(EMAIL_COLUMN+1);
            rowNum++;
          }
        } finally {
          rs.close();
        }
      } finally {
        stmt.close();
      }
    } finally {
      conn.close();
    }
    return rtn;
  }
  
  private static Connection getConnection() throws SQLException {
    return (sampleDataDS != null ? sampleDataDS.getConnection() : DriverManager.getConnection(SampleDataJDBCUrl, SampleDataUserId, SampleDataPassword));
  }

  /*
   * Updates the database from the 2-d array
   *   [0..rowcount-1][REGION_COLUMN] = Region
   *   [0..rowcount-1][MGR_COLUMN] = Mgr Name
   *   [0..rowcount-1][EMAIL_COLUMN] = Email Address
   * param userUpdates 2-d array as follows:
   * throws SQLException
   */
  private void setExistingEmailUsers(String[][] userUpdates) throws SQLException {
    Connection conn = getConnection();
    try {
      conn.setAutoCommit(false);
      try {
         // Delete all from the table.
         Statement delStmt = conn.createStatement();
         try {
           System.out.println("Executing: " + delStmt.toString());
           delStmt.executeUpdate(SampleDelete);
         } finally {
           delStmt.close();
         }

         PreparedStatement stmt = conn.prepareStatement(SampleDataInsert);
         try {
           for (int rowNum = 0; rowNum < userUpdates.length; rowNum++) {
             stmt.setString(REGION_COLUMN+1, userUpdates[rowNum][REGION_COLUMN]);
             stmt.setString(MGR_COLUMN+1, userUpdates[rowNum][MGR_COLUMN]);
             stmt.setString(EMAIL_COLUMN+1, userUpdates[rowNum][EMAIL_COLUMN]);
             System.out.println("Executing: " + stmt.toString());
             stmt.executeUpdate();
           }
         } finally {
           stmt.close();
         }
         conn.commit();
       } catch (SQLException ex) {
         ex.printStackTrace();
         conn.rollback();
       }
    } finally {
      conn.setAutoCommit(true);
      conn.close();
    }
    
  }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
   
/*
 * Copyright 2006 Pentaho Corporation.  All rights reserved. 
 * This software was developed by Pentaho Corporation and is provided under the terms 
 * of the Mozilla Public License, Version 1.1, or any later version. You may not use 
 * this file except in compliance with the license. If you need a copy of the license, 
 * please go to http://www.mozilla.org/MPL/MPL-1.1.txt. The Original Code is the Pentaho 
 * BI Platform.  The Initial Developer is Pentaho Corporation.
 *
 * Software distributed under the Mozilla Public License is distributed on an "AS IS" 
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or  implied. Please refer to 
 * the license for the specific language governing your rights and limitations.
*/

   response.setCharacterEncoding(LocaleHelper.getSystemEncoding()); 
	response.setCharacterEncoding(LocaleHelper.getSystemEncoding());
 	String baseUrl = PentahoSystem.getApplicationContext().getBaseUrl();
 
	String path = request.getContextPath();

	IPentahoSession userSession = PentahoHttpSessionHelper.getPentahoSession( request );
   
   
      out.write("\r\n");
      out.write("\r\n");

    initJdbc();
        
    String action = request.getParameter("action");
    if( "update".equals( action ) ) {
		// update the records in the database
		int index = 0;
		boolean running = true;
		while(running) {
			String region = request.getParameter( "region"+index );
			if( region == null ) {
				running = false;
			} else {
				index++;
			}
		}
		String data[][] = new String[index][4];
		index = 0;
		running = true;
		while(running) {
			String region = request.getParameter( "region"+index );
			String name = request.getParameter( "name"+index );
			String email = request.getParameter( "email"+index );
			if( region != null && name != null && email != null ) {
				data[index][REGION_COLUMN] = region;
				data[index][MGR_COLUMN] = name;
				data[index][EMAIL_COLUMN] = email;
				index++;
			} else {
				running = false;
			}
		}
		if( index > 0 ) {
			setExistingEmailUsers( data );
		}
    }

	String intro = "";
	String footer = "";
  	String[][] existingUsers = getExistingEmailUsers();
	
	IUITemplater templater = PentahoSystem.get(IUITemplater.class, userSession );
	if( templater != null ) {
		String sections[] = templater.breakTemplate( "template-document.html", Messages.getString("UI.USER_BURST_EDIT_DATA_TITLE"), userSession ); //$NON-NLS-1$ //$NON-NLS-2$
		if( sections != null && sections.length > 0 ) {
			intro = sections[0];
		}
		if( sections != null && sections.length > 1 ) {
			footer = sections[1];
		}
	} else {
		intro = Messages.getString( "UI.ERROR_0002_BAD_TEMPLATE_OBJECT" );
	}

  
      out.print( intro );
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div style=\"margin-left:10px;\">\r\n");
      out.write("<span class=\"portlet-font\">");
      out.print( Messages.getString("UI.USER_BURST_EDIT_DATA_HINT") );
      out.write("</span>\r\n");
      out.write("<p/>\r\n");
      out.write("  <form name=\"burst_edit\" method=\"GET\">\r\n");
      out.write("  <table>\r\n");
      out.write("    <thead>\r\n");
      out.write("      <tr>\r\n");
      out.write("        <td class=\"portlet-table-header\">");
      out.print( Messages.getString("UI.USER_BURST_REGION") );
      out.write("</td>\r\n");
      out.write("        <td class=\"portlet-table-header\">");
      out.print( Messages.getString("UI.USER_BURST_MANAGER") );
      out.write("</td>\r\n");
      out.write("        <td class=\"portlet-table-header\">");
      out.print( Messages.getString("UI.USER_BURST_EMAIL") );
      out.write("</td>\r\n");
      out.write("      </tr>\r\n");
      out.write("    </thead>\r\n");
      out.write("        ");
 for (int rowNum = 0; rowNum < existingUsers.length; rowNum++) {
      out.write("\r\n");
      out.write("        <tr>\r\n");
      out.write("          <td class=\"portlet-table-text\"><input type=\"hidden\" name=\"region");
      out.print( rowNum );
      out.write("\" value=\"");
      out.print(existingUsers[rowNum][REGION_COLUMN]);
      out.write('"');
      out.write('>');
      out.print(existingUsers[rowNum][0]);
      out.write("</td>\r\n");
      out.write("          <td><input class=\"portlet-form-input-field\" name=\"name");
      out.print( rowNum );
      out.write("\" value=\"");
      out.print(existingUsers[rowNum][MGR_COLUMN]);
      out.write("\"></td>\r\n");
      out.write("          <td><input class=\"portlet-form-input-field\" name=\"email");
      out.print( rowNum );
      out.write("\" size=\"40\" value=\"");
      out.print(existingUsers[rowNum][EMAIL_COLUMN]);
      out.write("\"></td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("  </table>\r\n");
      out.write("  <p/>\r\n");
      out.write("  <input type=\"hidden\" name=\"action\" value=\"update\">\r\n");
      out.write("  <input type=\"submit\" class=\"portlet-form-button\" value=\"");
      out.print( Messages.getString("UI.USER_UPDATE") );
      out.write("\"/>\r\n");
      out.write("  </form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.print( footer );
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
