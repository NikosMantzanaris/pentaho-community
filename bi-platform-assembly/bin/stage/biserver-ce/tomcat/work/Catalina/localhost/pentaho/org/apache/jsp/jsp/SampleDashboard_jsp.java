/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.32
 * Generated at: 2012-11-01 17:49:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import java.util.Date;
import java.io.ByteArrayOutputStream;
import org.pentaho.platform.util.web.SimpleUrlFactory;
import org.pentaho.platform.web.jsp.messages.Messages;
import org.pentaho.platform.engine.core.system.PentahoSystem;
import org.pentaho.platform.uifoundation.chart.DashboardWidgetComponent;
import org.pentaho.platform.web.http.request.HttpRequestParameterProvider;
import org.pentaho.platform.web.http.session.HttpSessionParameterProvider;
import org.pentaho.platform.api.engine.IPentahoSession;
import org.pentaho.platform.web.http.WebTemplateHelper;
import org.pentaho.platform.util.VersionHelper;
import org.pentaho.platform.util.messages.LocaleHelper;
import org.pentaho.platform.engine.core.solution.SimpleParameterProvider;
import org.pentaho.platform.engine.services.solution.SolutionHelper;
import org.pentaho.platform.uifoundation.chart.ChartHelper;
import org.pentaho.platform.web.http.PentahoHttpSessionHelper;

public final class SampleDashboard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;



/*
 * Copyright 2006 Pentaho Corporation.  All rights reserved. 
 * This software was developed by Pentaho Corporation and is provided under the terms 
 * of the Mozilla Public License, Version 1.1, or any later version. You may not use 
 * this file except in compliance with the license. If you need a copy of the license, 
 * please go to http://www.mozilla.org/MPL/MPL-1.1.txt. The Original Code is the Pentaho 
 * BI Platform.  The Initial Developer is Pentaho Corporation.
 *
 * Software distributed under the Mozilla Public License is distributed on an "AS IS" 
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or  implied. Please refer to 
 * the license for the specific language governing your rights and limitations.
 *
 * Created Feb 16, 2006 
 * @author James Dixon
 */

/*
 * This JSP is an example of how to use Pentaho components to build a dashboard.
 * The script in this file controls the layout and content generation of the dashboard.
 * See the document 'Dashboard Builder Guide' for more details
 */

	// set the character encoding e.g. UFT-8
	response.setCharacterEncoding(LocaleHelper.getSystemEncoding()); 

	// get the current Pentaho session or create a new one if needed
	IPentahoSession userSession = PentahoHttpSessionHelper.getPentahoSession( request );
	
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<title>Pentaho Sample Dashboard - JSP</title>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<body>\r\n");
      out.write("\r\n");
      out.write("\t");

	// See if we have a 'department' parameter
	String department = request.getParameter("department");
	// See if we have a 'region' parameter
	String region = request.getParameter("region");

	// Create the title for the top of the page
	String title = "Select a region";
	if( department != null ) {
		title = "This is headcount spending for " + region + ", " + department;
	} 
	else if ( region != null ) {
		title = "This is headcount spending for " + region;
	}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("<h1 style='font-family:Arial'>");
      out.print( title );
      out.write("</h1>\r\n");
      out.write("\r\n");
      out.write("<table>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td valign=\"top\"><span style=\"font-family:Arial;font-weight:bold\">Select a Region By Clicking on the Pie Chart</span>\r\n");
      out.write("\r\n");
      out.write("\t");

		// Make a pie chart showing the regions
		// create the parameres for the pie chart
	        SimpleParameterProvider parameters = new SimpleParameterProvider();
		// define the click url template
	        parameters.setParameter( "drill-url", "SampleDashboard?region={REGION}" );
		// define the slices of the pie chart
	        parameters.setParameter( "inner-param", "REGION"); //$NON-NLS-1$ //$NON-NLS-2$
		// set the width and the height
	        parameters.setParameter( "image-width", "450"); //$NON-NLS-1$ //$NON-NLS-2$
        	parameters.setParameter( "image-height", "300"); //$NON-NLS-1$ //$NON-NLS-2$
		StringBuffer content = new StringBuffer(); 
	        ArrayList messages = new ArrayList();
		// call the chart helper to generate the pie chart image and to get the HTML content
		// use the chart definition in 'bi-developers/dashboard/regions.widget.xml'
        	ChartHelper.doPieChart( "bi-developers", "dashboard", "regions.widget.xml", parameters, content, userSession, messages, null ); 
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t");
      out.print( content.toString() );
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t</td>\t\r\n");
      out.write("\t\t\t<td valign=\"top\"><span style=\"font-family:Arial;font-weight:bold\">\r\n");
      out.write("\t");

		if( region != null ) {
			// if the user has clicked on a slice of the pie chart we should have a region to work with
	
      out.write("\r\n");
      out.write("\t\t\tSelect a Department By Clicking on the Bar Chart\r\n");
      out.write("\t");

			// Make a bar chart showing the department 
			// create the parameres for the bar chart
	        	parameters = new SimpleParameterProvider();
			// define the click url template
	        	parameters.setParameter( "drill-url", "SampleDashboard?region="+region+"&amp;department={SERIES}" );
			parameters.setParameter( "REGION", region );
			parameters.setParameter( "outer-params", "REGION" );
			// define the category axis of the bar chart
        		parameters.setParameter( "inner-param", "DEPARTMENT"); //$NON-NLS-1$ //$NON-NLS-2$
			// set the width and the height
        		parameters.setParameter( "image-width", "450"); //$NON-NLS-1$ //$NON-NLS-2$
        		parameters.setParameter( "image-height", "300"); //$NON-NLS-1$ //$NON-NLS-2$
			content = new StringBuffer(); 
        		messages = new ArrayList();
			// call the chart helper to generate the pie chart image and to get the HTML content
			// use the chart definition in 'bi-developers/dashboard/regions.widget.xml'
	        	ChartHelper.doChart( "bi-developers", "dashboard", "departments.widget.xml", parameters, content, userSession, messages, null ); 
	
      out.write("\r\n");
      out.write("\t\t\t</span>\r\n");
      out.write("\t\t\t<br/>\r\n");
      out.write("\t\t\t");
      out.print( content.toString() );
      out.write('\r');
      out.write('\n');
      out.write('	');

		}
	
      out.write("\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td colspan=\"2\" valign=\"top\" style=\"font-family:Arial;font-weight:bold\"><hr size=\"1\"/>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td valign=\"top\"><span style=\"font-family:Arial;font-weight:bold\">\r\n");
      out.write("\t");

		if( department != null ) {

			// if the user has clicked on a bar of the bar chart we should have a region and department to work with

			// create a dial and supply a value we create from the current time
			Date now = new Date();
			int seconds = now.getSeconds();
			// create a value from -15 to +15
			int dialValue = -15+seconds/2;
			// create the parameres for the bar chart
	        	parameters = new SimpleParameterProvider();
			// set the value displayed on the dial
			parameters.setParameter( "value", ""+dialValue );
			// set the title for the dial
			parameters.setParameter( "title", "My Dial" );
			// set the width and the height
	        	parameters.setParameter( "image-width", "105"); //$NON-NLS-1$ //$NON-NLS-2$
        		parameters.setParameter( "image-height", "105"); //$NON-NLS-1$ //$NON-NLS-2$
			content = new StringBuffer(); 
        		messages = new ArrayList();
			// call the chart helper to generate the pie chart image and to get the HTML content
			// use the chart definition in 'bi-developers/dashboard/regions.widget.xml'
  		      	ChartHelper.doDial( "bi-developers", "dashboard", "sampledial.widget.xml", parameters, content, userSession, messages, null ); 
	
      out.write("\r\n");
      out.write("\t\t\tThe value of this dial is based on the current time\r\n");
      out.write("\t\t\t</span>\r\n");
      out.write("\t\t\t<p/>\r\n");
      out.write("\t\t\t");
      out.print( content.toString() );
      out.write('\r');
      out.write('\n');
      out.write('	');

		}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t\t<td valign=\"top\" style=\"font-family:Arial;font-weight:bold\">\r\n");
      out.write("\r\n");
      out.write("\t");

		if( department != null ) {


			// if the user has clicked on a bar of the bar chart we should have a region and department to work with

			// run a report and embed the content into this page

			// create the parameres for the report
	        	parameters = new SimpleParameterProvider();
			// pass the region and department to the report
			parameters.setParameter( "region", region );
			parameters.setParameter( "department", department );
			// create an output stream for the report content 
			ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        		messages = new ArrayList();
			// run the action sequence 'bi-developers/dashboard/jsp/report.xaction'
        		SolutionHelper.doAction( "bi-developers", "dashboard/jsp", "embedded_report.xaction", "SampleDashboard", parameters, outputStream , userSession, messages, null ); 
			// write the report content into this page
	
      out.write("\r\n");
      out.write("\t\t\tClick on a position title to drill to another page\r\n");
      out.write("\t\t\t<p/>\r\n");
      out.write("\t\t\t");
 out.write( outputStream.toString() ); 
      out.write('\r');
      out.write('\n');
      out.write('	');

		}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
